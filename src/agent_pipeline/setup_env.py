#!/usr/bin/env python3
"""
Setup script for Agent Pipeline environment configuration.
Run this to quickly set up your .env file with API keys.
"""

import os
import sys
from pathlib import Path

def setup_environment():
    """Interactive setup for environment variables."""
    
    print("Agent Pipeline Environment Setup")
    print("=" * 50)
    print()
    
    # Check if .env already exists
    env_path = Path(__file__).parent / '.env'
    env_example_path = Path(__file__).parent / '.env.example'
    
    if env_path.exists():
        overwrite = input("Warning: .env file already exists. Overwrite? (y/N): ").lower()
        if overwrite != 'y':
            print("Setup cancelled.")
            return
    
    # Copy from example if it doesn't exist
    if not env_example_path.exists():
        print("Error: .env.example not found. Please create it first.")
        return
    
    print("Please provide your API keys:\n")
    
    # OpenAI API Key
    openai_key = input("OpenAI API Key (from https://platform.openai.com/api-keys): ").strip()
    if not openai_key:
        print("Error: OpenAI API Key is required!")
        sys.exit(1)
    
    # Tavily API Key  
    tavily_key = input("Tavily API Key (from https://tavily.com/): ").strip()
    if not tavily_key:
        print("Error: Tavily API Key is required!")
        sys.exit(1)
    
    # Optional configurations
    print("\nOptional configurations (press Enter to use defaults):")
    openai_model = input("OpenAI Model (default: gpt-4): ").strip() or "gpt-4"
    debug_mode = input("Enable debug mode? (y/N): ").lower() == 'y'
    
    # Write .env file
    env_content = f"""# Agent Pipeline Environment Configuration
# Generated by setup_env.py

# Required API Keys
OPENAI_API_KEY={openai_key}
TAVILY_API_KEY={tavily_key}

# Model Configuration
OPENAI_MODEL={openai_model}
OPENAI_MAX_TOKENS=4000

# Cache Configuration
CACHE_ENABLED=true
CACHE_TTL=3600

# Debug Settings
DEBUG_MODE={'true' if debug_mode else 'false'}
LOG_LEVEL={'DEBUG' if debug_mode else 'INFO'}
"""
    
    with open(env_path, 'w') as f:
        f.write(env_content)
    
    print(f"\nSuccess: Environment configured!")
    print(f"Configuration saved to: {env_path}")
    print("\nYou can now run the pipeline with:")
    print("   python -m agent_pipeline cli")
    print("   python -m agent_pipeline")
    print("\nOr check status with:")
    print("   python -m agent_pipeline status")

def check_environment():
    """Check if environment is properly configured."""
    
    print("Checking environment configuration...")
    print("=" * 40)
    
    env_path = Path(__file__).parent / '.env'
    
    if not env_path.exists():
        print("Error: .env file not found")
        print("Tip: Run 'python setup_env.py' to create it")
        return False
    
    # Load environment variables
    try:
        from dotenv import load_dotenv
        load_dotenv(env_path)
    except ImportError:
        print("Warning: python-dotenv not installed. Install with: pip install python-dotenv")
    
    required_vars = ['OPENAI_API_KEY', 'TAVILY_API_KEY']
    missing_vars = []
    
    for var in required_vars:
        value = os.getenv(var)
        if not value:
            missing_vars.append(var)
            print(f"Missing: {var}")
        else:
            # Show first 10 chars + ...
            masked = value[:10] + "..." if len(value) > 10 else value
            print(f"Found: {var}: {masked}")
    
    if missing_vars:
        print(f"\nError: Missing required variables: {', '.join(missing_vars)}")
        print("Tip: Run 'python setup_env.py' to configure them")
        return False
    
    print("\nSuccess: Environment is properly configured!")
    return True

def main():
    """Main entry point."""
    
    if len(sys.argv) > 1 and sys.argv[1] == 'check':
        check_environment()
    else:
        setup_environment()

if __name__ == "__main__":
    main()